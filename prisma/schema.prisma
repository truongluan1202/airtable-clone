// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// NextAuth.js required models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  bases         Base[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Airtable clone models
model Base {
  id          String   @id @default(cuid())
  name        String
  description String?
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  tables      Table[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Table {
  id          String   @id @default(cuid())
  name        String
  description String?
  baseId      String
  base        Base     @relation(fields: [baseId], references: [id], onDelete: Cascade)
  columns     Column[]
  rows        Row[]
  views       View[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Column {
  id        String   @id @default(cuid())
  name      String
  type      ColumnType @default(TEXT)
  tableId   String
  table     Table    @relation(fields: [tableId], references: [id], onDelete: Cascade)
  cells     Cell[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([tableId, name])
}

model Row {
  id        String   @id @default(cuid())
  tableId   String
  table     Table    @relation(fields: [tableId], references: [id], onDelete: Cascade)
  cells     Cell[]
  cache     Json?    // Fast read cache: { [columnId]: value }
  search    String?  // Full-text search vector
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Cell {
  id       String     @id @default(cuid())
  rowId    String
  columnId String
  vText    String?
  vNumber  Float?
  row      Row        @relation(fields: [rowId], references: [id], onDelete: Cascade)
  column   Column     @relation(fields: [columnId], references: [id], onDelete: Cascade)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@unique([rowId, columnId])
}

model View {
  id          String   @id @default(cuid())
  name        String
  tableId     String
  table       Table    @relation(fields: [tableId], references: [id], onDelete: Cascade)
  filters     Json?    // Filter configuration
  sort        Json?    // Sort configuration
  columns     Json?    // Column visibility and order
  search      String?  // Search query
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

enum ColumnType {
  TEXT
  NUMBER
}
