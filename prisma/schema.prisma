generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DIRECT_DATABASE_URL")
  directUrl = env("DIRECT_DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String      @id @default(cuid())
  name          String?
  email         String      @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  accounts      Account[]
  bases         Base[]
  sessions      Session[]
  workspaces    Workspace[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Workspace {
  id          String   @id @default(cuid())
  name        String
  description String?
  userId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  bases       Base[]
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Base {
  id          String    @id @default(cuid())
  name        String
  description String?
  userId      String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  workspaceId String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  tables      Table[]

  @@index([userId])
  @@index([workspaceId])
}

model Table {
  id          String   @id @default(cuid())
  name        String
  description String?
  baseId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  columns     Column[]
  rows        Row[]
  base        Base     @relation(fields: [baseId], references: [id], onDelete: Cascade)
  views       View[]

  @@index([baseId])
}

model Column {
  id        String     @id @default(cuid())
  name      String
  type      ColumnType @default(TEXT)
  tableId   String
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  cells     Cell[]
  table     Table      @relation(fields: [tableId], references: [id], onDelete: Cascade)
}

model Row {
  id        String   @id @default(cuid())
  tableId   String
  cache     Json?
  search    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  cells     Cell[]
  table     Table    @relation(fields: [tableId], references: [id], onDelete: Cascade)

  @@index([tableId])
  @@index([tableId, createdAt, id])
}

model Cell {
  id        String   @id @default(cuid())
  rowId     String
  columnId  String
  vText     String?
  vNumber   Float?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  column    Column   @relation(fields: [columnId], references: [id], onDelete: Cascade)
  row       Row      @relation(fields: [rowId], references: [id], onDelete: Cascade)

  @@unique([rowId, columnId])
  @@index([rowId])
  @@index([columnId])
}

model View {
  id        String   @id @default(cuid())
  name      String
  tableId   String
  filters   Json?
  sort      Json?
  columns   Json?
  search    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  table     Table    @relation(fields: [tableId], references: [id], onDelete: Cascade)

  @@index([tableId])
}

enum ColumnType {
  TEXT
  NUMBER
}
